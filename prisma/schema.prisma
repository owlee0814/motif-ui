generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  username      String          @unique
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  social        UserSocial?
}

model UserSocial {
  id        String @id
  userId    String @unique
  posts     Post[]
  comments  Comment[]
  user      User   @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Community {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  text        String
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  communityId Int
  author      UserSocial @relation(fields: [authorId], references: [id])
  community   Community  @relation(fields: [communityId], references: [id])
  comments    Comment[]
}

model Comment {
  id        Int        @id @default(autoincrement())
  content   String
  authorId  String
  postId    Int
  parentId  Int?       // This field references the parent comment
  author    UserSocial @relation(fields: [authorId], references: [id])
  post      Post       @relation(fields: [postId], references: [id])
  parent    Comment?   @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[]  @relation("CommentToComment")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}